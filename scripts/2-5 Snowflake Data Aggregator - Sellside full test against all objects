--========================================
-- AGGREAGTOR FULL TEST CASE SETUP STEPS
--========================================
--
------------------------------------------
-- Step 1: Create a target table to stored summarized data
------------------------------------------
CREATE OR REPLACE TABLE ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST
AS
SELECT "DATA_PATTERN" DP
	  ,"DATA_NAME" DN
	  ,"DATA_DATE" DD
	  --,"DATA_HOUR"
	  --,"DATA_TIME"
	  --,"DATA_TIMEZONE"

	  ,"BUSINESS_UNIT" BU
	  ,"BUSINESS_UNIT_DETAIL" BUD
	  ,"BUSINESS_UNIT_ID" BUID
	  ,"BUSINESS_UNIT_DETAIL_ID" BUDID
	  --,"BUSINESS_PARTNER"	    BP
	  --,"TRAFFIC_PARTNER"	    TP
	  --,"PRODUCT_LINE"
	  --,"PRODUCT_DETAIL"
	  --,"PLACEMENT"
      
	  --,"REVENUE_DOMAIN" RD
	  --,"CAMPAIGN_DOMAIN" CD
	  --,"PROVIDER" VENDOR
	  ,"NETWORK" NW
	  ,"NETWORK_ID" NWID
	  ,"ACCOUNT" ACC
      
	  --,"PARTNER_TAG" PT
	  --,"TYPE_TAG"
	  --,"CHANNEL"
 	  --,"PRODUCT"     
	  --,"MARKET"
      
	  --,"COUNTRY"     
	  ,"DEVICE"
	  ,"DEVICE_TYPE" DTYPE
	  ,"DEVICE_TYPE_ID" DEVTID
	  --,"BIDDER"
	  ,"CONTRACT"
	  ,"CONTRACT_ID"
      
	  ,"CURRENCY"
	  ,"EXCHANGE_RATE"
	  ,"UP_STREAM_SHARE"
	  --,"DOWN_STREAM_SHARE"
	  --,"ECPI"
      
	  --,"CPC"
	  --,"CPA"
	  --,"CTR"
	  --,"PTQS"
	  ,"ROW_COUNT" RC
	  --,"PAGEVIEWS"
      
	  --,"REQUESTS" RQS
	  ,"MATCHED_REQUESTS" MRQS
	  --,"IN_COMING_BIDS"
	  --,"WINNING_BIDS"
	  ,"IMPRESSIONS" IMP
      
	  ,"CLICKS" CLK
	  --,"ACTIONS"
	  --,"SPAM_CLICKS"
	  ,"AD_REVENUE_USD" AD_REV
	  ,"REVENUE" REV
FROM "BI"."_CONTROL_LOGIC"."SELLSIDE_PERFORMANCE_DATA_TEMPLATE"
LIMIT 0;

------------------------------------------
-- Step 2: Register new target table into data landscape table
------------------------------------------
-- 
DELETE FROM SELLSIDE_PERFORMANCE_DATA_LANDSCAPE WHERE DATA_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST'; 
--
INSERT INTO SELLSIDE_PERFORMANCE_DATA_LANDSCAPE ("DATA_ALIAS","DATA_TABLE"
	  ,"DATA_PATTERN"
	  ,"DATA_NAME"
	  ,"DATA_DATE"
	  --,"DATA_HOUR"
	  --,"DATA_TIME"
	  --,"DATA_TIMEZONE"

	  ,"BUSINESS_UNIT"
	  ,"BUSINESS_UNIT_DETAIL"
	  ,"BUSINESS_UNIT_ID"
	  ,"BUSINESS_UNIT_DETAIL_ID"
	  --,"BUSINESS_PARTNER"
	  --,"TRAFFIC_PARTNER"
	  --,"PRODUCT_LINE"
	  --,"PRODUCT_DETAIL"
	  --,"PLACEMENT"
      
	  --,"REVENUE_DOMAIN"
	  --,"CAMPAIGN_DOMAIN"
	  --,"PROVIDER"
	  ,"NETWORK"
	  ,"NETWORK_ID"
	  ,"ACCOUNT"

	  --,"PARTNER_TAG"
	  --,"TYPE_TAG"
	  --,"CHANNEL"
	  --,"PRODUCT"
	  --,"MARKET"

	  --,"COUNTRY"
	  ,"DEVICE"
	  ,"DEVICE_TYPE"
	  ,"DEVICE_TYPE_ID"
	  --,"BIDDER"      
	  ,"CONTRACT"
	  ,"CONTRACT_ID"

	  ,"CURRENCY"
	  ,"EXCHANGE_RATE"
	  ,"UP_STREAM_SHARE"
	  --,"DOWN_STREAM_SHARE"
	  --,"ECPI"

	  --,"CPC"
	  --,"CPA"
	  --,"CTR"
	  --,"PTQS"
	  ,"ROW_COUNT"
	  --,"PAGEVIEWS"

	  --,"REQUESTS"
	  ,"MATCHED_REQUESTS"
	  --,"IN_COMING_BIDS"
	  --,"WINNING_BIDS"
	  ,"IMPRESSIONS"

	  ,"CLICKS"
	  --,"ACTIONS"
	  --,"SPAM_CLICKS"
	  ,"AD_REVENUE_USD"
	  ,"REVENUE"
)
SELECT 'TARGET_DATA:SOURCE_DATA,LOOKUP_DEVICE,LOOKUP_DETYPE,LOOKUP_NETWORK,LOOKUP_ACCOUNT,LOOKUP_BUSINESS,LOOKUP_COVERAGE,LOOKUP_REVSHARE,LOOKUP_CURRENCY' "DATA_TYPE",'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST' "DATA_TABLE"
	  ,'DP:$PATTERN,SOURCE_DATA' "DATA_PATTERN"
	  ,'DN' "DATA_NAME"
	  ,'DD' "DATA_DATE"
	  --,'DATA_HOUR' "DATA_HOUR"
	  --,'DATA_TIME' "DATA_TIME"
	  --,'DATA_TIMEZONE' "DATA_TIMEZONE"

	  ,'BU:SOURCE_DATA,LOOKUP_BUSINESS' "BUSINESS_UNIT"
	  ,'BUD:SOURCE_DATA,LOOKUP_BUSINESS' "BUSINESS_UNIT_DETAIL"
	  ,'BUID:SOURCE_DATA,LOOKUP_BUSINESS' "BUSINESS_UNIT_ID"
	  ,'BUDID:SOURCE_DATA,LOOKUP_BUSINESS' "BUSINESS_UNIT_DETAIL_ID"
	  --,'BP' "BUSINESS_PARTNER"
	  --,'TP' "TRAFFIC_PARTNER"
	  --,'PRODUCT_LINE' "PRODUCT_LINE"
	  --,'PRODUCT_DETAIL' "PRODUCT_DETAIL"
	  --,'PLACEMENT' "PLACEMENT"
      
	  --,"REVENUE_DOMAIN"
	  --,"CAMPAIGN_DOMAIN"
	  --,'VENDOR' "PROVIDER"
	  ,'NW' "NETWORK"
	  ,'NWID' "NETWORK_ID"
	  ,'ACC' "ACCOUNT"

	  --,'PT' "PARTNER_TAG"
	  --,'TYPE_TAG' "TYPE_TAG"
	  --,'CHANNEL' "CHANNEL"
	  --,'PRODUCT' "PRODUCT"
	  --,'MARKET' "MARKET"

	  --,'COUNTRY' "COUNTRY"
	  ,'DEVICE' "DEVICE"
	  ,'DTYPE:LOOKUP_DETYPE,SOURCE_DATA' "DEVICE_TYPE"
	  ,'DEVTID:LOOKUP_DETYPE,SOURCE_DATA' "DEVICE_TYPE_ID"
	  --,'BIDDER' "BIDDER"      
	  ,'CONTRACT' "CONTRACT"
	  ,'CONTRACT_ID' "CONTRACT_ID"

	  ,'CURRENCY' "CURRENCY"
	  ,'EXCHANGE_RATE' "EXCHANGE_RATE"
	  ,'UP_STREAM_SHARE' "UP_STREAM_SHARE"
	  --,'DOWN_STREAM_SHARE' "DOWN_STREAM_SHARE"
	  --,'ECPI' "ECPI"

	  --,'CPC' "CPC"
	  --,'CPA' "CPA"
	  --,'CTR' "CTR"
	  --,'PTQS' "PTQS"
	  ,'RC:SUM(?)' "ROW_COUNT"
	  --,'PAGEVIEWS:SUM(?)' "PAGEVIEWS"

	  --,'RQS:SUM(?)' "REQUESTS"
	  ,'MRQS:SUM(?)' "MATCHED_REQUESTS"
	  --,'IN_COMING_BIDS:SUM(?)' "IN_COMING_BIDS"
	  --,'WINNING_BIDS:SUM(?)' "WINNING_BIDS"
	  ,'IMP:SUM(?)' "IMPRESSIONS"

	  ,'CLK:SUM(?)' "CLICKS"
	  --,'ACTIONS:SUM(?)' "ACTIONS"
	  --,'SPAM_CLICKS:SUM(?)' "SPAM_CLICKS"
	  ,'AD_REV:SUM(?)' "AD_REVENUE"
	  ,'REV:SUM(?)' "REVENUE"
;

-- check new registration record
SELECT *
FROM SELLSIDE_PERFORMANCE_DATA_LANDSCAPE
WHERE DATA_TABLE IN (''
  ,'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST'
  ,'DATAMART.SELLSIDE_NETWORK.TAP_NATIVE_SOURCE_PUBID_PERFORMANCE_DAILY'
  ,'SELLSIDE_ACCOUNT_PARTNER_USAGE_MAPPING'); 

------------------------------------------
-- Step 3: Generate the parametwrs of the target data into target configuration table
------------------------------------------
--
DELETE FROM DATA_AGGREGATION_TARGETS WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';
--
CALL DATA_AGGREGATION_TARGET_SETUP(
  'SELLSIDE',
  'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST',
  'DATA_TIME',
  1440,
  'DATEADD(MINUTE, :2, :1)',
  'DAY',
  0
);

SELECT * FROM DATA_AGGREGATION_TARGETS
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';


------------------------------------------
-- Step 4: Search and setup all data source tables for new created target table
------------------------------------------
-- 
DELETE FROM DATA_AGGREGATION_SOURCES WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';

--
CALL DATA_AGGREGATION_SOURCE_SETUP (
	  'SELLSIDE', 
	  'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST', 
	  'DATAMART.SELLSIDE_NETWORK.GOOGLE_ADSENSE_CHANNEL_PLATFORM_COUNTRY_PERFORMANCE_DAILY',
	  0
	  );


--
CALL DATA_AGGREGATION_SOURCE_SETUP ('SELLSIDE', 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST', 0);

-- Check up
SELECT * 
FROM DATA_AGGREGATION_SOURCES
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';

-- Enable needed sources
UPDATE DATA_AGGREGATION_SOURCES
SET SOURCE_ENABLED = True
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST'
AND SOURCE_TABLE IN ('$'
  , 'DATAMART.SELLSIDE_NETWORK.AMAZON_UAM_BID_METRICS_REPORT_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.AMAZON_UAM_EARNINGS_REPORT_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.AOL_REVENUE_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.BING_PTAG_PERFORMANCE_DAILY'
  --, 'DATAMART.SELLSIDE_NETWORK.BING_TYPE_TAG_COUNTRY_PERFORMANCE_DAILY'
  --, 'DATAMART.SELLSIDE_NETWORK.BING_TYPE_TAG_PERFORMANCE_HOURLY'
  , 'DATAMART.SELLSIDE_NETWORK.DISTRICT_M_BOOST3_METRICS_API_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.FLYWEEL_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.GOOGLE_ADSENSE_CHANNEL_PLATFORM_COUNTRY_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.GOOGLE_ADSENSE_CHANNEL_PLATFORM_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.GOOGLE_ADSENSE_DOMAIN_PLATFORM_DAILY/AFD-CAD'
  , 'DATAMART.SELLSIDE_NETWORK.GOOGLE_ADSENSE_DOMAIN_PLATFORM_DAILY/AFD-USD'
  , 'DATAMART.SELLSIDE_NETWORK.GOOGLE_AD_MANAGER_ACCOUNT_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.GOOGLE_AD_MANAGER_ORDER_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.RUBICON_SITE_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.SHARETHROUGH_PLACEMENT_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.SOVRN_ALL_TRAFFIC_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.TAP_NATIVE_SOURCE_PUBID_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.TRIPLE_LIFT_PLACEMENT_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.TRIPLE_LIFT_PUBLISHER_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.YAHOO_SOURCE_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.YAHOO_SOURCE_PERFORMANCE_HOURLY'
  , 'DATAMART.SELLSIDE_NETWORK.YAHOO_SOURCE_PERFORMANCE_HOURLY_PARSED_TZ_LOS_ANGELES_SEARCH'
  , 'DATAMART.SELLSIDE_NETWORK.YAHOO_SOURCE_PLATFORM_PERFORMANCE_DAILY/SYNDICATION'
  , 'DATAMART.SELLSIDE_NETWORK.YAHOO_TYPE_PLATFORM_PERFORMANCE_DAILY'
  , 'DATAMART.SELLSIDE_NETWORK.YAHOO_TYPE_PLATFORM_PERFORMANCE_HOURLY'
  , 'DATAMART.SELLSIDE_NETWORK.YAHOO_TYPE_PLATFORM_PERFORMANCE_HOURLY_PARSED_TZ_LOS_ANGELES'
);

-- debug
CALL SELLSIDE_AGGREGATION_SOURCE_SETUP('ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST','DATAMART.SELLSIDE_NETWORK.BING_TYPE_TAG_COUNTRY_PERFORMANCE_DAILY', True);
CALL SELLSIDE_AGGREGATION_SOURCE_SETUP('ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST', True);


------------------------------------------
-- Step 5: Run a single day manual test
------------------------------------------
-- DELETE FROM ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST;
CALL DATA_AGGREGATOR ('ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST', '2020-01-15', 0);

-- check up
SELECT DD, COUNT(*) CNT
FROM ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST
GROUP BY DD
ORDER BY DD DESC;

SELECT DP, COUNT(*) CNT
FROM ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST
GROUP BY DP
ORDER BY DP DESC;

SELECT *
FROM ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST
WHERE DP NOT IN (3400179, 3400187)
ORDER BY DD DESC
LIMIT 100;

SELECT *
FROM ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST
--WHERE BUD IN ('Syndication')
ORDER BY DD DESC
LIMIT 100;

SELECT BITXOR(3400179,3400187),BITXOR(3400179,3400691),BITXOR(3400179,3400699);



------------------------------------------
-- Step 6: Run a loop through all available dates test
------------------------------------------
SELECT A.BATCH_PROCESSED
    ,MIN(B.DATA_AVAILABLETIME) DATA_AVAILABLETIME
FROM DATA_AGGREGATION_TARGETS A
JOIN DATA_AGGREGATION_SOURCES B
USING (TARGET_TABLE)
WHERE A.TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST'
GROUP BY A.BATCH_PROCESSED
;

-- Setup an initial starting date for next loop run
UPDATE DATA_AGGREGATION_TARGETS
SET  BATCH_PROCESSED = '2020-01-25'
    ,BATCH_PROCESSING = NULL
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';

-- update the source data availabily 
UPDATE DATA_AGGREGATION_SOURCES 
SET DATA_AVAILABLETIME = '2020-02-03',
    DATA_CHECKSCHEDULE = CURRENT_DATE()
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';

-- Automate the Aggregate data population
CALL DATA_AGGREGATOR ('ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST', 0);

-- check up
SELECT DD, COUNT(*) CNT
FROM ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST
GROUP BY DD 
ORDER BY DD DESC;

SELECT DP, COUNT(*) CNT
FROM ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST
GROUP BY DP
ORDER BY DP DESC;

SELECT *
FROM ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST
--WHERE BUD IN ('Syndication')
ORDER BY DD DESC
LIMIT 1000;

-- check the starting date for next loop run
SELECT *
FROM DATA_AGGREGATION_TARGETS
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';

-- Clear a temporarili blocking status
UPDATE DATA_AGGREGATION_TARGETS
SET BATCH_PROCESSING = NULL
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';

------------------------------------------
-- Step 7: Schedule an automation task to make the SP call
------------------------------------------
-- update the source data availabily 
UPDATE DATA_AGGREGATION_SOURCES 
SET DATA_AVAILABLETIME = '2020-01-13',
  DATA_CHECKSCHEDULE = CURRENT_DATE()
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';

-- Run summary population 
CALL DATA_AGGREGATOR ('ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST', 0);

-- Check the summary data status
SELECT *
FROM DATA_AGGREGATION_SOURCES
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';


------------------------------------------
-- Step 8: Check aggregated data status
------------------------------------------
SELECT DD, BU, BUD, COUNT(*) CNT
FROM ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST
GROUP BY DD, BU, BUD
ORDER BY DD DESC, BU, BUD;

SELECT DD, NW, ACC, COUNT(*) CNT
FROM ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST
GROUP BY DD, NW, ACC
ORDER BY DD DESC;

------------------------------------------
-- Step 8: Clean up the test context
------------------------------------------
DELETE FROM DATA_AGGREGATION_SOURCES 
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';

DELETE FROM DATA_AGGREGATION_TARGETS 
WHERE TARGET_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST';

DELETE FROM SELLSIDE_PERFORMANCE_DATA_LANDSCAPE 
WHERE DATA_TABLE = 'ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST'; 

DROP TABLE ZZZ_SELLSIDE_PERFORMANCE_AGG_TEST;

