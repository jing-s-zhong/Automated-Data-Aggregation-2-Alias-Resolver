USE DATABASE BI_TEST;
USE SCHEMA _CONTROL_LOGIC;
-------------------------------------------------------
-- Create a buyside test template table
-------------------------------------------------------
CREATE OR REPLACE TABLE _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_TEMPLATE (
  DATA_PATTERN NUMBER,
  DATA_NAME VARCHAR,
  DATA_DATE DATE,
  DATA_HOUR NUMBER,
  DATA_TIME TIMESTAMP_NTZ,
  TIMEZONE VARCHAR,
  --
  PROVIDER_ID NUMBER,
  NETWORK_NAME VARCHAR,
  NETWORK_NAME_ID NUMBER,
  NETWORK_TYPE_ID NUMBER,
  ACCOUNT_NAME VARCHAR,
  ACCOUNT_ID VARCHAR,
  --
  PRODUCT_LINE_ID NUMBER,
  CONTRACT_NAME NUMBER,
  CONTRACT_ID NUMBER,
  BI_ACCOUNT_ID NUMBER,
  CURRENCY_CODE VARCHAR,
  CONVERSION_RATE FLOAT,
  --
  IMPRESSIONS NUMBER,
  CLICKS NUMBER,
  NATIVE_SPEND FLOAT,
  SPEND FLOAT
);
SELECT * FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_TEMPLATE;
-------------------------------------------------------
-- Generate buyside test landscape table
-------------------------------------------------------
CALL DATA_AGGREGATION_LANDSCAPE (
  '_BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE',
  '_BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_TEMPLATE',
  PARSE_JSON('["DATA_PATTERN","DATA_NAME","DATA_DATE","DATA_HOUR","DATA_TIME","TIMEZONE",\n
             "PROVIDER_ID","NETWORK_NAME","NETWORK_NAME_ID","NETWORK_TYPE_ID","ACCOUNT_NAME","ACCOUNT_ID",\n
             "PRODUCT_LINE_ID","CONTRACT_NAME","CONTRACT_ID","BI_ACCOUNT_ID","CURRENCY_CODE","CONVERSION_RATE"]'),
  PARSE_JSON('["IMPRESSIONS","CLICKS","NATIVE_SPEND","SPEND"]')
  )
;
-- tabe should exist and has one of data in it
SELECT * FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE
;
-------------------------------------------------------
-- Create the source data filters
-------------------------------------------------------
INSERT OVERWRITE INTO DATA_AGGREGATION_FILTERS (
  FILTER_PATTERN,
  FILTER_NAME,
  FILTER_DETAIL
)
VALUES (
  '0',
  'BUYSIDE_ACCOUNT_DATA_DAILY_RAW',
  '(PROVIDER_ID != 51 OR (PROVIDER_ID = 51 AND DATA_TS < \'2020-06-01\'))'
),
(
  '0',
  'BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY',
  '(ACCOUNT_STATUS = \'Active\')'
);
SELECT * FROM DATA_AGGREGATION_FILTERS;
--
-- Convert filters into a pivot view
--
CREATE OR REPLACE VIEW DATA_AGGREGATION_FILTERS_VIEW
AS
SELECT *
FROM DATA_AGGREGATION_FILTERS
PIVOT (COUNT(FILTER_DETAIL) FOR FILTER_DETAIL IN (
  '(PROVIDER_ID != 51 OR (PROVIDER_ID = 51 AND DATA_TS < \'2020-06-01\'))',
  '(ACCOUNT_STATUS = \'Active\')'
));
SELECT * FROM DATA_AGGREGATION_FILTERS_VIEW;
-------------------------------------------------------
-- Configure the filtration data
-------------------------------------------------------
-- Account mapping mode 1
DELETE FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE WHERE DATA_ALIAS = 'MAP_FILTER';
INSERT INTO _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE( DATA_ALIAS,DATA_TABLE,
    "DATA_PATTERN","DATA_NAME","DATA_DATE","DATA_HOUR","DATA_TIME","TIMEZONE",
    "PROVIDER_ID","NETWORK_NAME","NETWORK_NAME_ID","NETWORK_TYPE_ID","ACCOUNT_NAME","ACCOUNT_ID",
    "PRODUCT_LINE_ID","CONTRACT_NAME","CONTRACT_ID","BI_ACCOUNT_ID","CURRENCY_CODE","CONVERSION_RATE",
    "IMPRESSIONS","CLICKS","NATIVE_SPEND","SPEND"
    )
SELECT $1,$2,DATA_PATTERN(PARSE_JSON($3)),$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24
FROM VALUES ('MAP_FILTER','DATA_AGGREGATION_FILTERS_VIEW',
    '[1,1,0,0,0,0, 0,0,0,0,0,1, 0,0,0,0,0,0]','FILTER_NAME:UPPER(MAP_FILTER)=UPPER(MAP_SOURCE)','','','','',
    '','','','','','(PROVIDER_ID != 51 OR (PROVIDER_ID = 51 AND DATA_TS < \'2020-06-01\')):MAP_FILTER',
    '','','','','','',
    '','','',''
    )
;
-------------------------------------------------------
-- Configure the mappings & looking up data
-------------------------------------------------------
-- Account mapping mode 1
DELETE FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE WHERE DATA_ALIAS = 'MAP_ACC_M1';
INSERT INTO _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE( DATA_ALIAS,DATA_TABLE,
    "DATA_PATTERN","DATA_NAME","DATA_DATE","DATA_HOUR","DATA_TIME","TIMEZONE",
    "PROVIDER_ID","NETWORK_NAME","NETWORK_NAME_ID","NETWORK_TYPE_ID","ACCOUNT_NAME","ACCOUNT_ID",
    "PRODUCT_LINE_ID","CONTRACT_NAME","CONTRACT_ID","BI_ACCOUNT_ID","CURRENCY_CODE","CONVERSION_RATE",
    "IMPRESSIONS","CLICKS","NATIVE_SPEND","SPEND"
    )
SELECT $1,$2,DATA_PATTERN(PARSE_JSON($3)),$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24
FROM VALUES ('MAP_ACC_M1','COMMON.ACCOUNT_METADATA_MAPPINGS',
    '[1,0,0,0,0,1, 1,0,1,1,1,1, 1,0,1,1,1,0]','','','','','TIMEZONE',
    'PROVIDER_ID:MAP_SOURCE=MAP_ACC_M1','','NETWORK_NAME_ID','NETWORK_TYPE_ID','ACCOUNT_NAME','ACCOUNT_ID:MAP_SOURCE=MAP_ACC_M1',
    'PRODUCT_LINE_ID','','CONTRACT_ID','BI_ACCOUNT_ID','CURRENCY_CODE','',
    '','','',''
    )
;
-- Account mapping mode 2
DELETE FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE WHERE DATA_ALIAS = 'MAP_ACC_M2';
INSERT INTO _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE( DATA_ALIAS,DATA_TABLE,
    "DATA_PATTERN","DATA_NAME","DATA_DATE","DATA_HOUR","DATA_TIME","TIMEZONE",
    "PROVIDER_ID","NETWORK_NAME","NETWORK_NAME_ID","NETWORK_TYPE_ID","ACCOUNT_NAME","ACCOUNT_ID",
    "PRODUCT_LINE_ID","CONTRACT_NAME","CONTRACT_ID","BI_ACCOUNT_ID","CURRENCY_CODE","CONVERSION_RATE",
    "IMPRESSIONS","CLICKS","NATIVE_SPEND","SPEND"
    )
SELECT $1,$2,DATA_PATTERN(PARSE_JSON($3)),$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24
FROM VALUES ('MAP_ACC_M2','COMMON.ACCOUNT_METADATA_MAPPINGS',
    '[1,0,0,0,0,1, 1,0,1,1,1,1, 1,0,1,1,1,0]','','','','','TIMEZONE',
    'PROVIDER_ID','','NETWORK_NAME_ID:MAP_SOURCE=MAP_ACC_M2','NETWORK_TYPE_ID','ACCOUNT_NAME','ACCOUNT_ID:MAP_SOURCE=MAP_ACC_M2',
    'PRODUCT_LINE_ID','','CONTRACT_ID','BI_ACCOUNT_ID','CURRENCY_CODE','',
    '','','',''
    )
;
-- Account mapping mode 3
DELETE FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE WHERE DATA_ALIAS = 'MAP_ACC_M3';
INSERT INTO _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE( DATA_ALIAS,DATA_TABLE,
    "DATA_PATTERN","DATA_NAME","DATA_DATE","DATA_HOUR","DATA_TIME","TIMEZONE",
    "PROVIDER_ID","NETWORK_NAME","NETWORK_NAME_ID","NETWORK_TYPE_ID","ACCOUNT_NAME","ACCOUNT_ID",
    "PRODUCT_LINE_ID","CONTRACT_NAME","CONTRACT_ID","BI_ACCOUNT_ID","CURRENCY_CODE","CONVERSION_RATE",
    "IMPRESSIONS","CLICKS","NATIVE_SPEND","SPEND"
    )
SELECT $1,$2,DATA_PATTERN(PARSE_JSON($3)),$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24
FROM VALUES ('MAP_ACC_M3','COMMON.ACCOUNT_METADATA_MAPPINGS',
    '[1,0,0,0,0,1, 1,0,1,1,1,1, 1,0,1,1,1,0]','','','','','TIMEZONE',
    'PROVIDER_ID','','NETWORK_NAME_ID','NETWORK_TYPE_ID','ACCOUNT_NAME','ACCOUNT_ID:MAP_SOURCE=MAP_ACC_M3',
    'PRODUCT_LINE_ID','','CONTRACT_ID','BI_ACCOUNT_ID','CURRENCY_CODE','',
    '','','',''
    )
;
-- Open currency excahnge rate
DELETE FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE WHERE DATA_ALIAS = 'LOOK_XCHG';
INSERT INTO _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE( DATA_ALIAS,DATA_TABLE,
    "DATA_PATTERN","DATA_NAME","DATA_DATE","DATA_HOUR","DATA_TIME","TIMEZONE",
    "PROVIDER_ID","NETWORK_NAME","NETWORK_NAME_ID","NETWORK_TYPE_ID","ACCOUNT_NAME","ACCOUNT_ID",
    "PRODUCT_LINE_ID","CONTRACT_NAME","CONTRACT_ID","BI_ACCOUNT_ID","CURRENCY_CODE","CONVERSION_RATE",
    "IMPRESSIONS","CLICKS","NATIVE_SPEND","SPEND"
    )
SELECT $1,$2,DATA_PATTERN(PARSE_JSON($3)),$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24
FROM VALUES ('LOOK_XCHG','DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY',
    '[1,0,1,0,0,0, 0,0,0,0,0,0, 0,0,0,0,1,1]','','DATA_TS:SOURCE_DATA=LOOK_XCHG','','','',
    '','','','','','',
    '','','','','CURRENCY:SOURCE_DATA=LOOK_XCHG','RATE',
    '','','',''
    )
;
-- tabe should exist and has one of data in it
SELECT * FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE
;
-------------------------------------------------------
-- Configure the source data
-------------------------------------------------------
-- Buyside account data raw
DELETE FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE WHERE DATA_TABLE = 'BI_TEST.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_RAW';
INSERT INTO _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE( DATA_ALIAS,DATA_TABLE,
    "DATA_PATTERN","DATA_NAME","DATA_DATE","DATA_HOUR","DATA_TIME","TIMEZONE",
    "PROVIDER_ID","NETWORK_NAME","NETWORK_NAME_ID","NETWORK_TYPE_ID","ACCOUNT_NAME","ACCOUNT_ID",
    "PRODUCT_LINE_ID","CONTRACT_NAME","CONTRACT_ID","BI_ACCOUNT_ID","CURRENCY_CODE","CONVERSION_RATE",
    "IMPRESSIONS","CLICKS","NATIVE_SPEND","SPEND"
    )
SELECT $1,$2,DATA_PATTERN(PARSE_JSON($3)),$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24
FROM VALUES ('SOURCE_DATA:MAP_FILTER@INNER,MAP_ACC_M1','BI_TEST.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_RAW',
    '[1,1,1,0,1,0, 1,0,0,0,0,1, 0,0,0,0,0,0]','\'BUYSIDE_ACCOUNT_DATA_DAILY_RAW\'','DATA_TS','','DATA_TS','',
    'MAP_SOURCE.PROVIDER_ID','','MAP_ACC_M1.NETWORK_NAME_ID','','','CASE MAP_SOURCE.PROVIDER_ID WHEN 99 THEN COALESCE(GRAIN:site, \'Yahoo Search\') ELSE MAP_SOURCE.ACCOUNT_ID END',
    'MAP_ACC_M1.PRODUCT_LINE_ID','','MAP_ACC_M1.CONTRACT_ID','COALESCE(MAP_ACC_M1.BI_ACCOUNT_ID,-1)','COALESCE(GRAIN:"currency",MAP_ACC_M1.CURRENCY_CODE)','',
    'METRICS:"impressions"','METRICS:"clicks"','METRICS:"spend"','METRICS:"spend"'
    )
;
-- Buyside account data manual entry
DELETE FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE WHERE DATA_TABLE = 'BI.MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY';
INSERT INTO _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE( DATA_ALIAS,DATA_TABLE,
    "DATA_PATTERN","DATA_NAME","DATA_DATE","DATA_HOUR","DATA_TIME","TIMEZONE",
    "PROVIDER_ID","NETWORK_NAME","NETWORK_NAME_ID","NETWORK_TYPE_ID","ACCOUNT_NAME","ACCOUNT_ID",
    "PRODUCT_LINE_ID","CONTRACT_NAME","CONTRACT_ID","BI_ACCOUNT_ID","CURRENCY_CODE","CONVERSION_RATE",
    "IMPRESSIONS","CLICKS","NATIVE_SPEND","SPEND"
    )
SELECT $1,$2,DATA_PATTERN(PARSE_JSON($3)),$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24
FROM VALUES ('SOURCE_DATA:MAP_ACC_M2','BI.MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY',
    '[1,1,1,0,1,0, 0,1,0,0,0,0, 0,0,0,0,0,0]','\'BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY\'','DATA_TS','','DATA_TS','',
    '','NETWORK_NAME','MAP_SOURCE.NETWORK_NAME_ID','','','MAP_SOURCE.ACCOUNT_ID',
    'MAP_ACC_M2.PRODUCT_LINE_ID','','MAP_ACC_M2.CONTRACT_ID','COALESCE(MAP_ACC_M2.BI_ACCOUNT_ID,-1)','COALESCE(MAP_SOURCE.CURRENCY_CODE,MAP_ACC_M2.CURRENCY_CODE)','',
    'IMPRESSIONS','CLICKS','NATIVE_SPEND','SPEND'
    )
;
-- tabe should exist and has one of data in it
SELECT * FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE
;
-------------------------------------------------------
-- Create a buyside test target table
-------------------------------------------------------
CREATE OR REPLACE TABLE _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING (
  DATA_PATTERN NUMBER,
  DATA_DATE DATE NOT NULL,
  BI_ACCOUNT_ID NUMBER NOT NULL,
  NETWORK_NAME_ID NUMBER,
  NETWORK_TYPE_ID NUMBER,
  CURRENCY_CODE VARCHAR,
  TIMEZONE VARCHAR,
  NETWORK_CLASSIFICATION_ID NUMBER,
  NETWORK_CLASSIFICATION_SUBTYPE_ID NUMBER,
  BUSINESS_UNIT_DETAIL_ID NUMBER,
  CONTRACT_ID NUMBER,
  CLICKS NUMBER,
  IMPRESSIONS NUMBER,
  SPEND FLOAT,
  CONVERSION_RATE FLOAT,
  PRODUCT_LINE_ID NUMBER
);
SELECT * FROM _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING;
--
-- DELETE FROM DATA_AGGREGATION_TARGETS WHERE TARGET_TABLE = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING';
--
MERGE INTO DATA_AGGREGATION_TARGETS D
USING (
  SELECT 'Test: account spend test target data' TARGET_LABEL
  	,$1 TARGET_TABLE
  	,$2 BATCH_CONTROL_COLUMN
  	,$3 BATCH_CONTROL_SIZE
  	,$4 BATCH_CONTROL_NEXT
  	,DATE_TRUNC('QUARTER',CURRENT_DATE) BATCH_PROCESSED
  	,NULL BATCH_PROCESSING
  	,NULL BATCH_MICROCHUNK_CURRENT
  	,$5 BATCH_SCHEDULE_TYPE
  	,NULL BATCH_SCHEDULE_LAST
  	,PARSE_JSON($6) PATTERN_COLUMNS
  	,PARSE_JSON($7) GROUPBY_COLUMNS
  	,DATA_PATTERN(PARSE_JSON($8)) GROUPBY_PATTERN
  	,True GROUPBY_FLEXIBLE
  	,PARSE_JSON($9) AGGREGATE_COLUMNS
  	,PARSE_JSON($10) AGGREGATE_FUNCTIONS
  	,NULL DEFAULT_PROCEDURE
  FROM VALUES (
  	'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING'
  	,'DATA_DATE'
  	, 1440
  	,'DATEADD(MINUTE, :2, :1)'
  	,'MINUTES'
  	-- all group-by columns in source data
    ,'["DATA_PATTERN",
  		"DATA_NAME",
  		"DATA_DATE",
  		"DATA_HOUR",
  		"DATA_TIME",
  		"TIMEZONE",
  		"PROVIDER_ID",
  		"NETWORK_NAME",
  		"NETWORK_NAME_ID",
  		"NETWORK_TYPE_ID",
  		"ACCOUNT_NAME",
  		"ACCOUNT_ID",
  		"PRODUCT_LINE_ID",
  		"CONTRACT_NAME",
  		"CONTRACT_ID",
  		"BI_ACCOUNT_ID",
  		"CURRENCY_CODE",
  		"CONVERSION_RATE"
        ]'
  	-- group-by columns of target data and which source column is the match
  	,'["DATA_DATE:DATA_DATE",
  		"NETWORK_NAME_ID:NETWORK_NAME_ID",
  		"CURRENCY_CODE:CURRENCY_CODE",
  		"PRODUCT_LINE_ID:PRODUCT_LINE_ID",
  		"CONTRACT_ID:CONTRACT_ID",
  		"BI_ACCOUNT_ID:BI_ACCOUNT_ID",
  		"CURRENCY_CODE:CURRENCY_CODE",
  		"CONVERSION_RATE:CONVERSION_RATE"
         ]'
  	-- indicators of which group-by column are needed in target table
  	,'[0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1]'
  	-- aggregate columns of target data and which aggregating column is the match
  	,'["IMPRESSIONS:IMPRESSIONS","CLICKS:CLICKS","SPEND:SPEND"]'
  	-- what aggregation function will be used for every aggregation column
  	,'["SUM(?)","SUM(?)","SUM(?)"]'
  	)
  ) S
ON D.TARGET_TABLE = S.TARGET_TABLE
WHEN MATCHED THEN UPDATE SET ID = D.ID
  ,TARGET_LABEL = S.TARGET_LABEL
  ,TARGET_TABLE = S.TARGET_TABLE
  ,BATCH_CONTROL_COLUMN = S.BATCH_CONTROL_COLUMN
  ,BATCH_CONTROL_SIZE = S.BATCH_CONTROL_SIZE
  ,BATCH_CONTROL_NEXT = S.BATCH_CONTROL_NEXT
  ,BATCH_PROCESSED = S.BATCH_PROCESSED
  ,BATCH_PROCESSING = S.BATCH_PROCESSING
  ,BATCH_MICROCHUNK_CURRENT = S.BATCH_MICROCHUNK_CURRENT
  ,BATCH_SCHEDULE_TYPE = S.BATCH_SCHEDULE_TYPE
  ,BATCH_SCHEDULE_LAST = S.BATCH_SCHEDULE_LAST
  ,PATTERN_COLUMNS = S.PATTERN_COLUMNS
  ,GROUPBY_COLUMNS = S.GROUPBY_COLUMNS
  ,GROUPBY_PATTERN = S.GROUPBY_PATTERN
  ,GROUPBY_FLEXIBLE = S.GROUPBY_FLEXIBLE
  ,AGGREGATE_COLUMNS = S.AGGREGATE_COLUMNS
  ,AGGREGATE_FUNCTIONS = S.AGGREGATE_FUNCTIONS
  ,DEFAULT_PROCEDURE = S.DEFAULT_PROCEDURE
WHEN NOT MATCHED THEN INSERT (
	TARGET_LABEL
	,TARGET_TABLE
	,BATCH_CONTROL_COLUMN
	,BATCH_CONTROL_SIZE
	,BATCH_CONTROL_NEXT
	,BATCH_PROCESSED
	,BATCH_PROCESSING
	,BATCH_MICROCHUNK_CURRENT
	,BATCH_SCHEDULE_TYPE
	,BATCH_SCHEDULE_LAST
	,PATTERN_COLUMNS
	,GROUPBY_COLUMNS
	,GROUPBY_PATTERN
	,GROUPBY_FLEXIBLE
	,AGGREGATE_COLUMNS
	,AGGREGATE_FUNCTIONS
	,DEFAULT_PROCEDURE
	)
VALUES (
  S.TARGET_LABEL
	,S.TARGET_TABLE
	,S.BATCH_CONTROL_COLUMN
	,S.BATCH_CONTROL_SIZE
	,S.BATCH_CONTROL_NEXT
	,S.BATCH_PROCESSED
	,S.BATCH_PROCESSING
	,S.BATCH_MICROCHUNK_CURRENT
	,S.BATCH_SCHEDULE_TYPE
	,S.BATCH_SCHEDULE_LAST
	,S.PATTERN_COLUMNS
	,S.GROUPBY_COLUMNS
	,S.GROUPBY_PATTERN
	,S.GROUPBY_FLEXIBLE
	,S.AGGREGATE_COLUMNS
	,S.AGGREGATE_FUNCTIONS
	,S.DEFAULT_PROCEDURE
);
-- it should show 1 row in total
SELECT * FROM DATA_AGGREGATION_TARGETS
WHERE TARGET_TABLE = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING'
;
--
-- Buyside account data manual entry
--
DELETE FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE WHERE DATA_TABLE = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING';
INSERT INTO _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE( DATA_ALIAS,DATA_TABLE,
    "DATA_PATTERN","DATA_NAME","DATA_DATE","DATA_HOUR","DATA_TIME","TIMEZONE",
    "PROVIDER_ID","NETWORK_NAME","NETWORK_NAME_ID","NETWORK_TYPE_ID","ACCOUNT_NAME","ACCOUNT_ID",
    "PRODUCT_LINE_ID","CONTRACT_NAME","CONTRACT_ID","BI_ACCOUNT_ID","CURRENCY_CODE","CONVERSION_RATE",
    "IMPRESSIONS","CLICKS","NATIVE_SPEND","SPEND"
    )
SELECT $1,$2,DATA_PATTERN(PARSE_JSON($3)),$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24
FROM VALUES ('TARGET_DATA:SOURCE_DATA,LOOK_XCHG','_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING',
    '[0,0,1,0,0,0, 0,0,1,0,0,0, 1,0,1,1,1,1]','\'BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING\'','DATA_DATE','','','',
    '','','NETWORK_NAME_ID','','','',
    'PRODUCT_LINE_ID','','CONTRACT_ID','BI_ACCOUNT_ID','CURRENCY_CODE','CONVERSION_RATE:LOOK_XCHG,SOURCE_DATA',
    'IMPRESSIONS:SUM(?)','CLICKS:SUM(?)','','SPEND:SUM(?),LOOK_XCHG.RATE*(?)'
    )
;
-- tabe should exist and has one of data in it
SELECT * FROM _BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE
;
-------------------------------------------------------
-- Generate one aggregation source based on landscape
-------------------------------------------------------
CALL DATA_AGGREGATION_SOURCE_SETUP(
    '_BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE',
    '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING',
    'BI_TEST.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_RAW',
    0)
;
DELETE FROM DATA_AGGREGATION_SOURCES WHERE TARGET_TABLE = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING';
CALL DATA_AGGREGATION_SOURCE_SETUP(
    '_BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LANDSCAPE',
    '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING',
    0
);
--
-- it should show 2 row in total, includes one with the SOURCE_TABLE='_TEST_DATA_SOURCE_4' and SOURCE_ENABLED=FALSE
SELECT *
FROM DATA_AGGREGATION_SOURCES
WHERE TARGET_TABLE = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING'
--AND SOURCE_ENABLED = False
;
-- enable all sources
UPDATE DATA_AGGREGATION_SOURCES
SET SOURCE_ENABLED = True
WHERE TARGET_TABLE = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING'
AND SOURCE_ENABLED = False
;
-- all sources are anabled
SELECT *
FROM DATA_AGGREGATION_SOURCES
WHERE TARGET_TABLE = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING'
--AND SOURCE_ENABLED = False
;
-------------------------------------------------------
-- Generate all aggregation sources based on landscape
-------------------------------------------------------
-- start a full data population
CALL DATA_AGGREGATOR ('_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING', 1);
--
CALL DATA_AGGREGATOR ('_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING', '2020-04-02T00:00:00.000Z', 1, 1);
--
--
-- check the generated data
select DATA_DATE, count(*) cnt
from _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING
group by DATA_DATE
order by DATA_DATE
;
--
-- check the details of the generated test data
select *
from _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING
order by DATA_DATE
limit 100
;



--=================================================================
-- 2020-07-01T00:00:00.000Z
--=================================================================
DELETE FROM _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING WHERE DATA_DATE >= '2020-07-01T00:00:00.000Z' AND DATA_DATE < DATEADD(MINUTE, '1440', '2020-07-01T00:00:00.000Z');
CALL DATA_AGGREGATOR ('_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING', '2020-07-01T00:00:00.000Z', 1);
;



-----------------------------------------------------------------
-- BI.MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY
-----------------------------------------------------------------
MERGE INTO _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING T
USING (
	SELECT DATA_DATE
		,NETWORK_NAME_ID
		,PRODUCT_LINE_ID
		,CONTRACT_ID
		,BI_ACCOUNT_ID
		,CURRENCY_CODE
		,CONVERSION_RATE
		,SUM(IMPRESSIONS) IMPRESSIONS
		,SUM(CLICKS) CLICKS
		,SUM(SPEND) SPEND
	FROM (
		SELECT DATA_DATE
			,NETWORK_NAME_ID
			,PRODUCT_LINE_ID
			,CONTRACT_ID
			,BI_ACCOUNT_ID
			,CURRENCY_CODE
			,CONVERSION_RATE
			,IMPRESSIONS
			,CLICKS
			,SPEND
		FROM (
			SELECT SOURCE_DATA.DATA_PATTERN
				,SOURCE_DATA.DATA_NAME
				,SOURCE_DATA.DATA_DATE
				,SOURCE_DATA.DATA_TIME
				,SOURCE_DATA.NETWORK_NAME_ID
				,SOURCE_DATA.ACCOUNT_ID
				,SOURCE_DATA.PRODUCT_LINE_ID
				,SOURCE_DATA.CONTRACT_ID
				,SOURCE_DATA.BI_ACCOUNT_ID
				,SOURCE_DATA.CURRENCY_CODE
				,COALESCE(LOOK_XCHG.RATE, SOURCE_DATA.CONVERSION_RATE) CONVERSION_RATE
				,SOURCE_DATA.IMPRESSIONS IMPRESSIONS
				,SOURCE_DATA.CLICKS CLICKS
				,LOOK_XCHG.RATE * (SOURCE_DATA.SPEND) SPEND
			FROM (
				SELECT DATA_PATTERN(PARSE_JSON('[1,1,1,0,1,0,0,1,1,0,0,1,1,0,1,1,1,0]')) DATA_PATTERN
					,'BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY' DATA_NAME
					,DATA_TS DATA_DATE
					,DATA_TS DATA_TIME
					,MAP_SOURCE.NETWORK_NAME_ID NETWORK_NAME_ID
					,MAP_SOURCE.ACCOUNT_ID ACCOUNT_ID
					,MAP_ACC_M2.PRODUCT_LINE_ID PRODUCT_LINE_ID
					,MAP_ACC_M2.CONTRACT_ID CONTRACT_ID
					,COALESCE(MAP_ACC_M2.BI_ACCOUNT_ID, - 1) BI_ACCOUNT_ID
					,COALESCE(MAP_SOURCE.CURRENCY_CODE, MAP_ACC_M2.CURRENCY_CODE) CURRENCY_CODE
					,NULL CONVERSION_RATE
					,SUM(IMPRESSIONS) IMPRESSIONS
					,SUM(CLICKS) CLICKS
					,SUM(SPEND) SPEND
				FROM BI.MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY MAP_SOURCE
				LEFT JOIN COMMON.ACCOUNT_METADATA_MAPPINGS MAP_ACC_M2 ON MAP_SOURCE.NETWORK_NAME_ID = MAP_ACC_M2.NETWORK_NAME_ID
					AND MAP_SOURCE.ACCOUNT_ID = MAP_ACC_M2.ACCOUNT_ID
				WHERE DATA_TS >= '2020-07-01T00:00:00.000Z'
					AND DATA_TS < DATEADD(MINUTE, 1440, '2020-07-01T00:00:00.000Z')
				GROUP BY DATA_TS
					,DATA_TS
					,MAP_SOURCE.NETWORK_NAME_ID
					,MAP_SOURCE.ACCOUNT_ID
					,MAP_ACC_M2.PRODUCT_LINE_ID
					,MAP_ACC_M2.CONTRACT_ID
					,COALESCE(MAP_ACC_M2.BI_ACCOUNT_ID, - 1)
					,COALESCE(MAP_SOURCE.CURRENCY_CODE, MAP_ACC_M2.CURRENCY_CODE)
				) SOURCE_DATA
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY LOOK_XCHG ON SOURCE_DATA.DATA_DATE = LOOK_XCHG.DATA_TS
				AND SOURCE_DATA.CURRENCY_CODE = LOOK_XCHG.CURRENCY
			)
		WHERE DATA_DATE >= '2020-07-01T00:00:00.000Z'
			AND DATA_DATE < DATEADD(MINUTE, 1440, '2020-07-01T00:00:00.000Z')
		)
	GROUP BY DATA_DATE
		,NETWORK_NAME_ID
		,PRODUCT_LINE_ID
		,CONTRACT_ID
		,BI_ACCOUNT_ID
		,CURRENCY_CODE
		,CONVERSION_RATE
	) S
	ON COALESCE(TO_CHAR(T.DATA_DATE), '') = COALESCE(TO_CHAR(S.DATA_DATE), '')
		AND COALESCE(TO_CHAR(T.NETWORK_NAME_ID), '') = COALESCE(TO_CHAR(S.NETWORK_NAME_ID), '')
		AND COALESCE(TO_CHAR(T.PRODUCT_LINE_ID), '') = COALESCE(TO_CHAR(S.PRODUCT_LINE_ID), '')
		AND COALESCE(TO_CHAR(T.CONTRACT_ID), '') = COALESCE(TO_CHAR(S.CONTRACT_ID), '')
		AND COALESCE(TO_CHAR(T.BI_ACCOUNT_ID), '') = COALESCE(TO_CHAR(S.BI_ACCOUNT_ID), '')
		AND COALESCE(TO_CHAR(T.CURRENCY_CODE), '') = COALESCE(TO_CHAR(S.CURRENCY_CODE), '')
		AND COALESCE(TO_CHAR(T.CONVERSION_RATE), '') = COALESCE(TO_CHAR(S.CONVERSION_RATE), '')
WHEN MATCHED
	THEN
		UPDATE
		SET IMPRESSIONS = S.IMPRESSIONS
			,CLICKS = S.CLICKS
			,SPEND = S.SPEND
WHEN NOT MATCHED
	THEN
		INSERT (
			DATA_DATE
			,NETWORK_NAME_ID
			,PRODUCT_LINE_ID
			,CONTRACT_ID
			,BI_ACCOUNT_ID
			,CURRENCY_CODE
			,CONVERSION_RATE
			,IMPRESSIONS
			,CLICKS
			,SPEND
			)
		VALUES (
			S.DATA_DATE
			,S.NETWORK_NAME_ID
			,S.PRODUCT_LINE_ID
			,S.CONTRACT_ID
			,S.BI_ACCOUNT_ID
			,S.CURRENCY_CODE
			,S.CONVERSION_RATE
			,S.IMPRESSIONS
			,S.CLICKS
			,S.SPEND
			);

-----------------------------------------------------------------
-- BI_TEST.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_RAW
-----------------------------------------------------------------
MERGE INTO _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING T
USING (
	SELECT DATA_DATE
		,NETWORK_NAME_ID
		,PRODUCT_LINE_ID
		,CONTRACT_ID
		,BI_ACCOUNT_ID
		,CURRENCY_CODE
		,CONVERSION_RATE
		,SUM(IMPRESSIONS) IMPRESSIONS
		,SUM(CLICKS) CLICKS
		,SUM(SPEND) SPEND
	FROM (
		SELECT DATA_DATE
			,NETWORK_NAME_ID
			,PRODUCT_LINE_ID
			,CONTRACT_ID
			,BI_ACCOUNT_ID
			,CURRENCY_CODE
			,CONVERSION_RATE
			,IMPRESSIONS
			,CLICKS
			,SPEND
		FROM (
			SELECT SOURCE_DATA.DATA_PATTERN
				,SOURCE_DATA.DATA_NAME
				,SOURCE_DATA.DATA_DATE
				,SOURCE_DATA.DATA_TIME
				,SOURCE_DATA.PROVIDER_ID
				,SOURCE_DATA.NETWORK_NAME_ID
				,SOURCE_DATA.ACCOUNT_ID
				,SOURCE_DATA.PRODUCT_LINE_ID
				,SOURCE_DATA.CONTRACT_ID
				,SOURCE_DATA.BI_ACCOUNT_ID
				,SOURCE_DATA.CURRENCY_CODE
				,COALESCE(LOOK_XCHG.RATE, SOURCE_DATA.CONVERSION_RATE) CONVERSION_RATE
				,SOURCE_DATA.IMPRESSIONS IMPRESSIONS
				,SOURCE_DATA.CLICKS CLICKS
				,LOOK_XCHG.RATE * (SOURCE_DATA.SPEND) SPEND
			FROM (
				SELECT DATA_PATTERN(PARSE_JSON('[1,1,1,0,1,0,1,0,1,0,0,1,1,0,1,1,1,0]')) DATA_PATTERN
					,'BUYSIDE_ACCOUNT_DATA_DAILY_RAW' DATA_NAME
					,DATA_TS DATA_DATE
					,DATA_TS DATA_TIME
					,MAP_SOURCE.PROVIDER_ID PROVIDER_ID
					,MAP_ACC_M1.NETWORK_NAME_ID NETWORK_NAME_ID
					,CASE MAP_SOURCE.PROVIDER_ID
						WHEN 99
							THEN COALESCE(GRAIN: site, 'Yahoo Search')
						ELSE MAP_SOURCE.ACCOUNT_ID
						END ACCOUNT_ID
					,MAP_ACC_M1.PRODUCT_LINE_ID PRODUCT_LINE_ID
					,MAP_ACC_M1.CONTRACT_ID CONTRACT_ID
					,COALESCE(MAP_ACC_M1.BI_ACCOUNT_ID, - 1) BI_ACCOUNT_ID
					,COALESCE(GRAIN: "currency", MAP_ACC_M1.CURRENCY_CODE) CURRENCY_CODE
					,NULL CONVERSION_RATE
					,SUM(METRICS: "impressions") IMPRESSIONS
					,SUM(METRICS: "clicks") CLICKS
					,SUM(METRICS: "spend") SPEND
				FROM BI_TEST.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_RAW MAP_SOURCE
				INNER JOIN DATA_AGGREGATION_FILTERS_VIEW MAP_FILTER ON UPPER(FILTER_NAME) = UPPER('BUYSIDE_ACCOUNT_DATA_DAILY_RAW')
					AND (
						PROVIDER_ID != 51
						OR (
							PROVIDER_ID = 51
							AND DATA_TS < '2020-06-01'
							)
						)
				LEFT JOIN COMMON.ACCOUNT_METADATA_MAPPINGS MAP_ACC_M1 ON MAP_SOURCE.PROVIDER_ID = MAP_ACC_M1.PROVIDER_ID
					AND CASE MAP_SOURCE.PROVIDER_ID
						WHEN 99
							THEN COALESCE(GRAIN: site, 'Yahoo Search')
						ELSE MAP_SOURCE.ACCOUNT_ID
						END = MAP_ACC_M1.ACCOUNT_ID
				WHERE DATA_TS >= '2020-07-01T00:00:00.000Z'
					AND DATA_TS < DATEADD(MINUTE, 1440, '2020-07-01T00:00:00.000Z')
				GROUP BY DATA_TS
					,DATA_TS
					,MAP_SOURCE.PROVIDER_ID
					,MAP_ACC_M1.NETWORK_NAME_ID
					,CASE MAP_SOURCE.PROVIDER_ID
						WHEN 99
							THEN COALESCE(GRAIN: site, 'Yahoo Search')
						ELSE MAP_SOURCE.ACCOUNT_ID
						END
					,MAP_ACC_M1.PRODUCT_LINE_ID
					,MAP_ACC_M1.CONTRACT_ID
					,COALESCE(MAP_ACC_M1.BI_ACCOUNT_ID, - 1)
					,COALESCE(GRAIN: "currency", MAP_ACC_M1.CURRENCY_CODE)
				) SOURCE_DATA
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY LOOK_XCHG ON SOURCE_DATA.DATA_DATE = LOOK_XCHG.DATA_TS
				AND SOURCE_DATA.CURRENCY_CODE = LOOK_XCHG.CURRENCY
			)
		WHERE DATA_DATE >= '2020-07-01T00:00:00.000Z'
			AND DATA_DATE < DATEADD(MINUTE, 1440, '2020-07-01T00:00:00.000Z')
		)
	GROUP BY DATA_DATE
		,NETWORK_NAME_ID
		,PRODUCT_LINE_ID
		,CONTRACT_ID
		,BI_ACCOUNT_ID
		,CURRENCY_CODE
		,CONVERSION_RATE
	) S
	ON COALESCE(TO_CHAR(T.DATA_DATE), '') = COALESCE(TO_CHAR(S.DATA_DATE), '')
		AND COALESCE(TO_CHAR(T.NETWORK_NAME_ID), '') = COALESCE(TO_CHAR(S.NETWORK_NAME_ID), '')
		AND COALESCE(TO_CHAR(T.PRODUCT_LINE_ID), '') = COALESCE(TO_CHAR(S.PRODUCT_LINE_ID), '')
		AND COALESCE(TO_CHAR(T.CONTRACT_ID), '') = COALESCE(TO_CHAR(S.CONTRACT_ID), '')
		AND COALESCE(TO_CHAR(T.BI_ACCOUNT_ID), '') = COALESCE(TO_CHAR(S.BI_ACCOUNT_ID), '')
		AND COALESCE(TO_CHAR(T.CURRENCY_CODE), '') = COALESCE(TO_CHAR(S.CURRENCY_CODE), '')
		AND COALESCE(TO_CHAR(T.CONVERSION_RATE), '') = COALESCE(TO_CHAR(S.CONVERSION_RATE), '')
WHEN MATCHED
	THEN
		UPDATE
		SET IMPRESSIONS = S.IMPRESSIONS
			,CLICKS = S.CLICKS
			,SPEND = S.SPEND
WHEN NOT MATCHED
	THEN
		INSERT (
			DATA_DATE
			,NETWORK_NAME_ID
			,PRODUCT_LINE_ID
			,CONTRACT_ID
			,BI_ACCOUNT_ID
			,CURRENCY_CODE
			,CONVERSION_RATE
			,IMPRESSIONS
			,CLICKS
			,SPEND
			)
		VALUES (
			S.DATA_DATE
			,S.NETWORK_NAME_ID
			,S.PRODUCT_LINE_ID
			,S.CONTRACT_ID
			,S.BI_ACCOUNT_ID
			,S.CURRENCY_CODE
			,S.CONVERSION_RATE
			,S.IMPRESSIONS
			,S.CLICKS
			,S.SPEND
			);
